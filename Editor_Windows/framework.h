// header.h: 표준 시스템 포함 파일
// 또는 프로젝트 특정 포함 파일이 들어 있는 포함 파일입니다.
//

#pragma once

#include "targetver.h"
#define WIN32_LEAN_AND_MEAN             // 거의 사용되지 않는 내용을 Windows 헤더에서 제외합니다.
// Windows 헤더 파일
#include <windows.h>
// C 런타임 헤더 파일입니다.
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>


// 정적 라이브러리 - 우리는 코드 공유가 필요 없으므로 이를 사용할 것
// 프로그램이 빌드될 때, 자기 소스코드 위에 올라감.
// 동시에 두 프로그램이 돌아갈 때, 겹치는 라이브러리들은 메모리 낭비가 됨 - 동적 라이브러리 필요
// 
// 장점 : 프로그램이 라이브러리를 포함하여 시스템 환경이 변해도 어플리케이션에 아무런 영향이 없다.
//			컴파일 시에 필요한 라이브러리를 적재하기에 이식성이 좋다.
//			런타임시 외부를 참조할 필요가 없으므로 속도가 빠르다.
// 
// 단점 : 같은 코드를 가진 프로그램이 실행될 경우가 있다면 코드가 중복될 수 있으니, 그만큼 메모리 낭비
//			라이브러리 변경시 변경된 라이브러리만 재배포 하면 되는게 아니라, 다시 컴파일해서 재배포해야함.
 
// 동적 라이브러리
// 프로그램을 키든 안키든 메모리에 라이브러리가 실행됨. 다른 프로그램에서 이를 사용할 때 접근하여 사용.

// 장점 : 메모리 절약
//			보다 쉽게 업그레이드, 배포 가능
//			서로 다른 프로그램에서 동일한 함수 호출 가능
//			프로그램 변경시 라이브러리만 재배포하면 되니 유지보수 쉬움

// 단점 : 
// 외부 의존도가 높으므로 이식성 낮음
// 공유 라이브러리를 메모리에 올리고, 이를 찾아 접근해야 하기 때문에 속도가 느림.